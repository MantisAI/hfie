# generated by datamodel-codegen:
#   filename:  https://api.endpoints.huggingface.cloud/api-doc/openapi.json
#   timestamp: 2023-12-01T10:01:53+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import AwareDatetime, BaseModel, Field, RootModel, conint
from typing_extensions import Literal


class ApiResponseError(BaseModel):
    error: str


class Empty(BaseModel):
    pass


class EndpointAccount(BaseModel):
    id: str = Field(..., description="Account id")
    name: str = Field(..., description="Account name")


class EndpointImageCredentials(BaseModel):
    password: str
    username: str = Field(..., description="Registry username")


class EndpointModelImage1(BaseModel):
    huggingface: Dict[str, Any] = Field(
        ..., description="Model served by an Hugging Face container"
    )


class Custom(BaseModel):
    credentials: Optional[EndpointImageCredentials] = None
    env: Optional[Dict[str, str]] = Field(
        None, description="Container environment variables"
    )
    health_route: Optional[str] = Field(
        None, description="Container health route", examples=["/health"]
    )
    port: Optional[conint(ge=0)] = Field(
        80, description="Endpoint API port", examples=[8000]
    )
    url: str = Field(
        ..., description="URL fo the container", examples=["https://host/image:tag"]
    )


class EndpointModelImage2(BaseModel):
    custom: Custom = Field(..., description="Model served by a custom container")


class EndpointModelImageUpdate1(BaseModel):
    huggingface: Dict[str, Any] = Field(
        ..., description="Model served by an Hugging Face container"
    )


class Custom1(BaseModel):
    credentials: Optional[EndpointImageCredentials] = None
    env: Optional[Dict[str, str]] = Field(
        None, description="Container environment variables"
    )
    health_route: Optional[str] = Field(
        None, description="Container health route", examples=["/health"]
    )
    port: Optional[conint(ge=0)] = Field(
        80, description="Endpoint API port", examples=[8000]
    )
    url: Optional[str] = Field(
        None, description="URL fo the container", examples=["https://host/image:tag"]
    )


class EndpointModelImageUpdate2(BaseModel):
    custom: Custom1 = Field(..., description="Model served by a custom container")


class EndpointProvider(BaseModel):
    region: str = Field(..., description="Provider region", examples=["us-east-1"])
    vendor: str = Field(..., description="Provider vendor", examples=["aws"])


class EndpointScaling(BaseModel):
    maxReplica: conint(ge=0) = Field(
        ..., description="Maximum number of endpoint replica", examples=[8]
    )
    minReplica: conint(ge=0) = Field(
        ..., description="Minimum number of endpoint replica", examples=[2]
    )


class EndpointScalingUpdate(BaseModel):
    maxReplica: Optional[conint(ge=0)] = Field(
        None, description="Maximum number of endpoint replica", examples=[8]
    )
    minReplica: Optional[conint(ge=0)] = Field(
        None, description="Minimum number of endpoint replica", examples=[2]
    )


class EndpointStatusPrivate(BaseModel):
    serviceName: Optional[str] = Field(
        None, description="VPC service name used to add the private link"
    )


class MetricName(
    RootModel[
        Literal[
            "request-count",
            "median-latency",
            "p95-latency",
            "success-throughput",
            "bad-request-throughput",
            "server-error-throughput",
            "cpu-usage",
            "memory-usage",
            "gpu-usage",
            "gpu-memory-usage",
            "average-latency",
            "success-rate",
            "bad-request-rate",
            "server-error-rate",
        ]
    ]
):
    root: Literal[
        "request-count",
        "median-latency",
        "p95-latency",
        "success-throughput",
        "bad-request-throughput",
        "server-error-throughput",
        "cpu-usage",
        "memory-usage",
        "gpu-usage",
        "gpu-memory-usage",
        "average-latency",
        "success-rate",
        "bad-request-rate",
        "server-error-rate",
    ]


class MetricsParams(BaseModel):
    dnsPrefix: str
    from_: conint(ge=0) = Field(..., alias="from")
    step: Optional[str] = None
    to: conint(ge=0)


class Compute(BaseModel):
    accelerator: Literal["cpu", "gpu"] = Field(..., description="Compute accelerator")
    architecture: str = Field(
        ...,
        description="Compute accelerator architecture",
        examples=["Nvidia Tesla T4"],
    )
    gpuMemoryGb: Optional[conint(ge=0)] = Field(
        None, description="Amount of memory per GPU in GB", examples=["24"]
    )
    instanceSize: str = Field(
        ..., description="Compute accelerator instance size", examples=["medium"]
    )
    instanceType: str = Field(
        ..., description="Compute accelerator instance type", examples=["g4dn.xlarge"]
    )
    memoryGb: conint(ge=0) = Field(
        ...,
        description="Amount of RAM which can be requested per endpoint replica",
        examples=["14"],
    )
    numAccelerators: conint(ge=0) = Field(
        ...,
        description="Number of accelerator units which can be requested per endpoint replica",
        examples=["1"],
    )
    numCpus: Optional[conint(ge=0)] = Field(
        None,
        description="Number of CPUs which can be requested per endpoint replica",
        examples=["3"],
    )
    pricePerHour: float = Field(
        ...,
        description="Price per hour in dollar of an endpoint replica",
        examples=["0.6"],
    )
    reserved: bool = Field(..., description="Reserved compute", examples=[False])
    status: Literal["available", "notAvailable"] = Field(
        ..., description="Resource status"
    )


class ComputeList(BaseModel):
    items: List[Compute] = Field(
        ..., description="Vendor region compute resources list"
    )


class EndpointCompute(BaseModel):
    accelerator: Literal["cpu", "gpu"] = Field(..., description="Endpoint accelerator")
    instanceSize: str = Field(..., examples=["large"])
    instanceType: str = Field(
        ..., description="Compute instance type", examples=["c6i"]
    )
    scaling: EndpointScaling


class EndpointComputeUpdate(BaseModel):
    accelerator: Optional[Literal["cpu", "gpu"]] = Field(
        None, description="Endpoint accelerator"
    )
    instanceSize: Optional[str] = Field(None, examples=["large"])
    instanceType: Optional[str] = Field(
        None, description="Compute instance type", examples=["c6i"]
    )
    scaling: Optional[EndpointScalingUpdate] = None


class EndpointModel(BaseModel):
    framework: Literal["custom", "pytorch", "tensorflow"]
    image: Union[EndpointModelImage1, EndpointModelImage2]
    repository: str = Field(
        ..., description="HuggingFace repository", examples=["gpt2"]
    )
    revision: Optional[str] = Field(
        None,
        description="Model commit hash, if not set the latest commit will be used",
        examples=["6c0e6080953db56375760c0471a8c5f2929baf11"],
    )
    task: Optional[
        Literal[
            "text-classification",
            "zero-shot-classification",
            "token-classification",
            "question-answering",
            "fill-mask",
            "summarization",
            "translation",
            "text2text-generation",
            "text-generation",
            "feature-extraction",
            "image-classification",
            "automatic-speech-recognition",
            "audio-classification",
            "object-detection",
            "image-segmentation",
            "table-question-answering",
            "conversational",
            "sentence-similarity",
            "sentence-embeddings",
            "sentence-ranking",
            "text-to-image",
            "custom",
        ]
    ] = None


class EndpointModelUpdate(BaseModel):
    framework: Optional[Literal["custom", "pytorch", "tensorflow"]] = None
    image: Optional[
        Union[EndpointModelImageUpdate1, EndpointModelImageUpdate2]
    ] = Field(None, description="Update endpoint model image")
    repository: Optional[str] = Field(
        None, description="HuggingFace repository", examples=["gpt2"]
    )
    revision: Optional[str] = Field(
        None,
        description="Model commit hash, if not set the latest commit will be used",
        examples=["6c0e6080953db56375760c0471a8c5f2929baf11"],
    )
    task: Optional[
        Literal[
            "text-classification",
            "zero-shot-classification",
            "token-classification",
            "question-answering",
            "fill-mask",
            "summarization",
            "translation",
            "text2text-generation",
            "text-generation",
            "feature-extraction",
            "image-classification",
            "automatic-speech-recognition",
            "audio-classification",
            "object-detection",
            "image-segmentation",
            "table-question-answering",
            "conversational",
            "sentence-similarity",
            "sentence-embeddings",
            "sentence-ranking",
            "text-to-image",
            "custom",
        ]
    ] = None


class EndpointStatus(BaseModel):
    createdAt: AwareDatetime = Field(..., description="Date of creation")
    createdBy: EndpointAccount
    message: str = Field(
        ...,
        description="Information about the state of the endpoint",
        examples=["Endpoint is ready"],
    )
    private: Optional[EndpointStatusPrivate] = None
    readyReplica: conint(ge=0) = Field(
        ..., description="Number of replica ready to handle requests", examples=[2]
    )
    state: Literal[
        "pending",
        "initializing",
        "updating",
        "updateFailed",
        "running",
        "paused",
        "failed",
        "scaledToZero",
    ] = Field(..., description="State of the endpoint")
    targetReplica: conint(ge=0) = Field(
        ..., description="Target number of replica to handle requests", examples=[4]
    )
    updatedAt: AwareDatetime = Field(..., description="Date of last update")
    updatedBy: EndpointAccount
    url: Optional[str] = Field(
        None,
        description="URL the endpoint is reachable at",
        examples=["https://endpoint-id.region.vendor.endpoints.huggingface.cloud"],
    )


class EndpointUpdate(BaseModel):
    compute: Optional[EndpointComputeUpdate] = None
    model: Optional[EndpointModelUpdate] = None


class EndpointWithStatus(BaseModel):
    accountId: Optional[str] = Field(
        None, description="Account ID used to link a VPC to a private endpoint"
    )
    compute: EndpointCompute
    model: EndpointModel
    name: str = Field(
        ...,
        description="Endpoint name. Must only contains lowercase alphanumeric characters or '-' and have a length of 32 characters maximum",
        examples=["my-endpoint"],
    )
    provider: EndpointProvider
    status: EndpointStatus
    type: Literal["public", "protected", "private"] = Field(
        ...,
        description="Endpoint type. Public mean , private mean accessible only via a VPC",
    )


class EndpointWithStatusList(BaseModel):
    items: List[EndpointWithStatus]


class Region(BaseModel):
    computes: List[Compute] = Field(
        ..., description="Vendor region compute resources list"
    )
    label: str = Field(..., examples=["N. Virginia"])
    name: str = Field(..., description="Region name", examples=["us-east-1"])
    status: Literal["available", "notAvailable"] = Field(
        ..., description="Resource status"
    )


class RegionList(BaseModel):
    items: List[Region] = Field(..., description="Vendor regions list")


class Vendor(BaseModel):
    name: str = Field(..., examples=["aws"])
    regions: List[Region] = Field(..., description="Vendor regions list")
    status: Literal["available", "notAvailable"] = Field(
        ..., description="Resource status"
    )


class VendorList(BaseModel):
    items: List[Vendor] = Field(..., description="Vendors list")


class Vendors(BaseModel):
    vendors: List[Vendor] = Field(..., description="Vendors list")


class Endpoint(BaseModel):
    accountId: Optional[str] = Field(
        None,
        description="Account ID used to link a VPC to a private endpoint",
        examples=[None],
    )
    compute: EndpointCompute
    model: EndpointModel
    name: str = Field(
        ...,
        description="Endpoint name. Must only contains lowercase alphanumeric characters or '-' and have a length of 32 characters maximum",
        examples=["my-endpoint"],
    )
    provider: EndpointProvider
    type: Literal["public", "protected", "private"] = Field(
        ...,
        description="Endpoint type. Public mean , private mean accessible only via a VPC",
    )
